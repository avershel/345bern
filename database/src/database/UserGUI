package GutenSearch;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.Date;
import java.util.Timer;

import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTabbedPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.text.BadLocationException;
import javax.swing.text.DefaultHighlighter;
import javax.swing.text.Highlighter;
import javax.swing.text.Highlighter.HighlightPainter;

/*
 * UserGUI
 * Class that creates the User GUI
 *
 * @author group 7
 */
public class UserGUI
{
  Database db = new Database();
  JFrame userFrame;
  String dir = "$HOME//Desktop";
  boolean advanced = false;
  
  JTabbedPane tabPane = new JTabbedPane();


  public static void main(String[] args)
  {
    UserGUI userGUI = new UserGUI();
    userGUI.userGUI();
  }

  /*
   * creates user GUI
   *
   */
  private void userGUI()
  {
    final JFrame welcomeFrame = new JFrame("GutenSearch");
    welcomeFrame.setSize(800,800);
    welcomeFrame.setLayout(new BorderLayout());
    
    JButton settings = new JButton("Choose Directory");
    settings.addActionListener(new ActionListener(){
        public void actionPerformed(ActionEvent e){
            JFrame chooser = new JFrame();
            JFileChooser fileChooser = new JFileChooser();
            fileChooser.setFileSelectionMode( JFileChooser.DIRECTORIES_ONLY);
            
            int retval = fileChooser.showOpenDialog(chooser);

            if (retval == JFileChooser.APPROVE_OPTION)
            {
                dir = fileChooser.getSelectedFile().toString();
                JOptionPane.showMessageDialog(chooser, "Directory Selected", "Confirmation", JOptionPane.PLAIN_MESSAGE);
                userGUIdetails();
            }
        }});
    
    JButton search = new JButton("Search Books!");
    search.addActionListener(new ActionListener(){
        public void actionPerformed(ActionEvent e){
            welcomeFrame.setVisible(false);
            userFrame.setVisible(true);
        }});
    
    JPanel continuePanel = new JPanel(new FlowLayout());
    continuePanel.add(settings);
    continuePanel.add(search);
    welcomeFrame.add(continuePanel, BorderLayout.SOUTH);
    
    JLabel logo = new JLabel(new ImageIcon("/cs/home/stu/fowlerne/gslogo.png"));
    JPanel logoPanel = new JPanel(new BorderLayout());
    logoPanel.setBackground(Color.WHITE);
    logoPanel.add(logo, BorderLayout.CENTER);
    
    JLabel guten = new JLabel("Welcome to GutenSearch");
    guten.setFont(new Font("Sans-Serif", Font.BOLD, 20));
    JPanel gutenPanel = new JPanel(new FlowLayout());
    gutenPanel.add(guten);
    gutenPanel.setBackground(Color.WHITE);
    
    logoPanel.add(gutenPanel, BorderLayout.NORTH);
   
    logoPanel.setBackground(Color.WHITE);

    welcomeFrame.add(logoPanel, BorderLayout.CENTER);
    welcomeFrame.setVisible(true);
    
    userFrame = new JFrame("GutenSearch");
    userFrame.setSize(800,800);
    userFrame.setLayout(new BorderLayout());
    //userGUIdetails();
  }

  /*
   * creates user GUI details
   *
   */
  private void userGUIdetails()
  {
//    tabPane.addTab("Tab 1", resultPanel,
//              "Does nothing");        
      File folder = new File(dir);
        File[] listOfFiles = folder.listFiles();
     
        for (int i = 0; i < listOfFiles.length; i++) {
          File file = listOfFiles[i];
          if (file.isFile() ) {
            try
            {
              db.addTxtFiles(file);
            }
            catch (FileNotFoundException e1)
            {
              // TODO Auto-generated catch block
              e1.printStackTrace();
            }
            catch (IOException e1)
            {
              // TODO Auto-generated catch block
              e1.printStackTrace();
            }
            //String content = FileUtils.readFileToString(file);
            /* do somthing with content */
          }
        }
     
    //panels for search section
    final JPanel searchLabelPanel = new JPanel(new FlowLayout());
    final JPanel searchInputPanel = new JPanel(new FlowLayout());
    JLabel searchLabel = new JLabel("Enter Search Terms:");
    final JPanel searchPanel = new JPanel(new BorderLayout());
    
    JLabel searchLabel1 = new JLabel("                                  ");
    // JPanel searchPanel1 = new JPanel(new BorderLayout());
    
    //text areas for search field and results
    final JTextField searchText = new JTextField(25);
    final JTextArea resultText = new JTextArea();
    resultText.setLineWrap(true);
    resultText.setEditable(false);
    
    //add details to panels
    searchLabelPanel.add(searchLabel);
    searchLabelPanel.add(searchLabel1);

    searchInputPanel.add(searchText);
    searchPanel.add(searchLabelPanel, BorderLayout.NORTH);
    searchPanel.add(searchInputPanel, BorderLayout.CENTER);
    
    //panels for result section
    JPanel resultLabelPanel = new JPanel(new FlowLayout());
    final JLabel resultLabel = new JLabel("Results");
    JPanel resultPanel = new JPanel(new BorderLayout());
    JScrollPane scrollPane = new JScrollPane(resultText);

    
    //panels for search results
    resultLabelPanel.add(resultLabel);
    resultPanel.add(resultLabelPanel, BorderLayout.NORTH);
    resultPanel.add(scrollPane, BorderLayout.CENTER);
    
    JPanel resultPanel2 = new JPanel(new FlowLayout());
    resultPanel2.add(resultLabelPanel, BorderLayout.NORTH);
    resultPanel2.add(scrollPane, BorderLayout.CENTER);
    
    JPanel resultPanel3 = new JPanel(new FlowLayout());
    resultPanel3.add(resultLabelPanel, BorderLayout.NORTH);
    resultPanel3.add(scrollPane, BorderLayout.CENTER);
    
    JPanel resultPanel4 = new JPanel(new FlowLayout());
    resultPanel4.add(resultLabelPanel, BorderLayout.NORTH);
    resultPanel4.add(scrollPane, BorderLayout.CENTER);
    
    resultPanel.add(resultLabelPanel, BorderLayout.NORTH);
    resultPanel.add(scrollPane, BorderLayout.CENTER);
    
    //add tabs
    tabPane.addTab("Result 1", resultPanel);    
    tabPane.addTab("Result 2", resultPanel2);
    tabPane.addTab("Result 3", resultPanel3);
    tabPane.addTab("Result 4", resultPanel4);
    
    //action listener for search button
    searchText.addActionListener(new ActionListener(){
      public void actionPerformed(ActionEvent e){
          long startTime = System.currentTimeMillis();
          long elapsedTime = 0L;
          String result = "";
          if(advanced)
          {
              result = db.AdvancedSearch(searchText.getText());
          }
          else
          {
              result = db.search(searchText.getText());
          }
          elapsedTime = (new Date()).getTime() - startTime;
          double seconds = elapsedTime/ 1000.0;

          resultLabel.setText("Results:(Searched " + Database.textcount + " Texts in "+ seconds + " Seconds)");
          
          if(result.equals("QUERY TERM NOT FOUND"))
          {
              resultText.setText("");
              JOptionPane.showMessageDialog(userFrame, result, "Error", JOptionPane.ERROR_MESSAGE);
          }
          else
          {
              resultText.setText(db.search(searchText.getText()));
              int index = resultText.getText().indexOf(searchText.getText());
              int len = searchText.getText().length();
              Highlighter highlighter = resultText.getHighlighter();
              HighlightPainter painter = new DefaultHighlighter.DefaultHighlightPainter(Color.YELLOW);
              while ( index >= 0 ) {
                 try
                 {
                     highlighter.addHighlight(index, index+len, painter);
                 }
                 catch ( BadLocationException e1 )
                 {
                     // TODO Auto-generated catch block
                     e1.printStackTrace();
                 }
                 index = resultText.getText().indexOf(searchText.getText(), index+len);
                }

          }
      }});
    
    //button for clearing the search
    JButton clearSearch = new JButton("Clear Search");
    clearSearch.addActionListener(new ActionListener(){
      public void actionPerformed(ActionEvent e){
        searchText.setText("");
        resultText.setText("");
      }});
    
    //panel for the search button
    JPanel clearPanel = new JPanel(new FlowLayout());
    clearPanel.add(clearSearch);
    resultPanel.add(clearPanel, BorderLayout.SOUTH);
    
  //Advanced Search button
    JButton advancedSearch = new JButton("Advanced Search");
    advancedSearch.addActionListener(new ActionListener(){
        public void actionPerformed(ActionEvent e){
            System.out.println( "da buggssssss" );
            //searchPanel.remove(advancedSearch);
            searchPanel.removeAll();
            searchPanel.invalidate();
            searchPanel.repaint();
            searchPanel.add(searchLabelPanel, BorderLayout.NORTH);
            searchPanel.add(searchInputPanel, BorderLayout.CENTER);
            advanced = true;
            //System.exit(0);
        }});
    
    JPanel advancedSearchPanel = new JPanel(new FlowLayout());
    advancedSearchPanel.add(advancedSearch);
    searchPanel.add(advancedSearchPanel, BorderLayout.EAST); //shift to right
  
    
    //add components to main panel
    JPanel textBoxPanel = new JPanel(new BorderLayout());
    textBoxPanel.add(searchPanel, BorderLayout.NORTH);
    textBoxPanel.add(tabPane, BorderLayout.CENTER);
    userFrame.add(textBoxPanel, BorderLayout.CENTER);

  }
}
