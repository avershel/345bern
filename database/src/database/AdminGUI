package GutenSearch;

import java.awt.*;
import java.awt.event.*;
import java.io.*;
import java.util.*;

import javax.swing.*;
import javax.swing.text.BadLocationException;
import javax.swing.text.DefaultHighlighter;
import javax.swing.text.Highlighter;
import javax.swing.text.Highlighter.HighlightPainter;


/*
 * AdminGUI
 * A class that creates the administrator GUI
 *
 * @author group 7
 */
public class AdminGUI implements ActionListener
{

  ArrayList<JTextField> list = new ArrayList<JTextField>();
  Database db = new Database();
  String destination = "$HOME//Desktop";
  static String defaultdest = "$HOME//Desktop";

  JTabbedPane tabPane = new JTabbedPane();
  JFrame adminFrame;
  boolean checktabs = true;

  /*
   * main
   */
  public static void main(String[] args)
  {
    new AdminGUI(defaultdest);
    
  }

  private AdminGUI(String path)
  {
	  destination = path;
	  adminFrame = new JFrame("GutenSearch");
	  adminFrame.setSize(800, 400);
	  adminFrame.setLayout(new BorderLayout());
	  adminFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
	  
      JLabel titleLabel = new JLabel();
      titleLabel.setText("Welcome To GutenSearch!");
      titleLabel.setHorizontalAlignment(JLabel.CENTER);
      titleLabel.setVerticalAlignment(JLabel.CENTER);
      titleLabel.setFont(new Font("Serif", Font.PLAIN, 18));

      //Main menu
      JMenuBar menuBar = new JMenuBar();
      JMenu file = new JMenu("File");
      JMenu help = new JMenu("Help");
      menuBar.add(file);
      menuBar.add(help);

      //File
      JMenuItem chooseDir = new JMenuItem("Choose Directory");
      chooseDir.addActionListener(this);
      file.add(chooseDir);
      JMenu upload = new JMenu("Upload...");
      JMenuItem upDir = new JMenuItem("Upload Directory");
      upDir.addActionListener(this);
      JMenuItem upFile = new JMenuItem("Upload File");
      upFile.addActionListener(this);
      JMenuItem edit = new JMenuItem("Edit a Source");
      edit.addActionListener(this);
      upload.add(upDir);
      upload.add(upFile);
      file.add(upload);
      file.add(edit);
      
      //Help
      

      //North
      JPanel pan = new JPanel();
      pan.setLayout(new GridLayout(2,1));
      pan.add(menuBar);
      pan.add(titleLabel);
      adminFrame.add(pan, BorderLayout.NORTH);
      
      //Center
      //ImageIcon image = new ImageIcon("gslogo.png");
      //JLabel label = new JLabel("check", image, JLabel.CENTER);
      //adminFrame.add(label);
      
      //South
      JPanel span = new JPanel();
      span.setLayout(new FlowLayout());
      JButton search = new JButton("Continue to Search");
      span.add(search);
      search.addActionListener(this);
      adminFrame.add(span, BorderLayout.SOUTH);

      adminFrame.setVisible(true);
      
  }

@Override
public void actionPerformed(ActionEvent e) {
	String command = e.getActionCommand();
	
	System.out.println(command);
	if(command.equals("Choose Directory"))
	{
		chooseDir();
			
	}else if(command.equals("Upload Directory"))
	{
		if(destination.equals(defaultdest))
		{
	      	JOptionPane.showMessageDialog(adminFrame, "You must choose the directory your files will be uploaded to"
	      			+ "in order to upload a Directory of files.\nTo choose your directory, go to File->Choose Directory.", "Choose Directory First!", JOptionPane.ERROR_MESSAGE);

		}
		else
		{
		System.out.println("here in dir");
		}
	}else if(command.equals("Upload File"))
	{
		if(destination.equals(defaultdest))
		{
			JOptionPane.showMessageDialog(adminFrame, "You must choose the directory your files will be uploaded to"
	      			+ "in order to upload a file.\nTo choose your directory, go to File->Choose Directory.", "Choose Directory First!", JOptionPane.ERROR_MESSAGE);

		}
		else
		{
	    JFileChooser jfc = new JFileChooser();
	    int retval = jfc.showOpenDialog(adminFrame);

	    if (retval == JFileChooser.APPROVE_OPTION)
	    {
	    	uploadFile(jfc.getSelectedFile());
	      	JOptionPane.showMessageDialog(adminFrame, "File Uploaded", "Confirmation", JOptionPane.PLAIN_MESSAGE);
	    }
		}
	}else if(command.equals("Edit a Source"))
	{
		if(destination.equals(defaultdest))
		{
	      	JOptionPane.showMessageDialog(adminFrame, "You must choose the directory where your files are held in order to Edit a file.\nTo choose your directory, go to File->Choose Directory.", "Choose Directory First!", JOptionPane.ERROR_MESSAGE);

		}
		else
		{
			adminFrame.dispose();
		editGUI();
		}
	}else if(command.equals("Continue to Search"))
	{
		if(destination.equals(defaultdest))
		{
	      	JOptionPane.showMessageDialog(adminFrame, "You must choose the directory where your files are held in order to search.\nTo choose your directory, go to File->Choose Directory.", "Choose Directory First!", JOptionPane.ERROR_MESSAGE);

		}
		else
		{
			adminFrame.dispose();
			searchGUI();				
		}
	}
	
}

public void uploadFile(File file)
{

	try
	{
		String str = file.toString();
		String[] holder = str.split("/");
		System.out.println(destination + " " + holder[holder.length-1]);

		File dest = new File(destination + "/" + holder[holder.length-1]);
		dest.getParentFile().mkdirs();
		dest.createNewFile();
		InputStream input = null;

		OutputStream output = null;

		try {

			input = new FileInputStream(file);

			output = new FileOutputStream(dest);

			byte[] buf = new byte[1024];

			int bytesRead;

			while ((bytesRead = input.read(buf)) > 0) {

				output.write(buf, 0, bytesRead);

			}

		} finally {

			input.close();

			output.close();

		}
	}
	catch (IOException e1)
	{
		e1.printStackTrace();
	}

}


public void chooseDir(){
	JFileChooser jfc = new JFileChooser();
	jfc.setFileSelectionMode( JFileChooser.DIRECTORIES_ONLY);

	int retval = jfc.showOpenDialog(adminFrame);
	
	if (retval == JFileChooser.APPROVE_OPTION)
	{
		destination = jfc.getSelectedFile().toString();
    	JOptionPane.showMessageDialog(adminFrame, "Directory Selected", "Confirmation", JOptionPane.PLAIN_MESSAGE);
	}
}


public void editGUI()
{

	//adminFrame.setVisible(false);
	
	final JFrame editFrame = new JFrame("Edit a Source");
	  editFrame.setSize(800, 400);
	  editFrame.setLayout(new BorderLayout());
	  editFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
	  
      JLabel titleLabel = new JLabel();
      titleLabel.setText("Fill In All Fields To Edit File");
      titleLabel.setHorizontalAlignment(JLabel.CENTER);
      titleLabel.setVerticalAlignment(JLabel.CENTER);
      titleLabel.setFont(new Font("Serif", Font.PLAIN, 18));

      editFrame.add(titleLabel, BorderLayout.NORTH);
	  
	  
	  JPanel p = new JPanel();
	  
	  p.add(new JLabel("              Old Title: "));
	  final    JTextField ottf = new JTextField(20);
	 
	     p.add(ottf);

	    p.add(new JLabel("              Old Author: "));
	    final   JTextField oatf = new JTextField(20);

	     p.add(oatf);

	    p.add(new JLabel("              New Title: "));
	     final JTextField nttf = new JTextField(20);

	     p.add(nttf);

	    p.add(new JLabel("              New Author: "));
	    final  JTextField natf = new JTextField(20);
	     p.add(natf);
	     
	     editFrame.add(p, BorderLayout.CENTER);

	     

	    JPanel bg = new JPanel();
	    bg.setLayout(new FlowLayout());
	    JButton editSource = new JButton("Apply Edits");
	    bg.add(editSource);
	    editSource.addActionListener(new ActionListener()
	    		{
	    	public void actionPerformed(ActionEvent e)
	    	{
	    		File dir = new File(destination);
	    		File[] directoryListing = dir.listFiles();
	    		String text1 = "";
	    		if (directoryListing != null) {
	    			for (File child : directoryListing) {
	    				// Do something with child
	    				BufferedReader br;
	    				try {
	    					br = new BufferedReader(new FileReader(child));
	    					String line = null;  
	    					try {
	    						while ((line = br.readLine()) != null)  
	    						{  

	    							text1 += line + "\n";


	    						}
	    						//System.out.println(ottf.getText());
	    						String []split = text1.split("\n\n");
	    						System.out.println("SPLIT SIZE = " + split.length + "\n[o] = " + split[0]);
	    						for(int i = 0; i < split.length; i++)
	    						{
	    							//	System.out.println(lh);
	    							if(split[i].indexOf("Title:") != -1)
	    							{
	    								String s = split[i].substring(7, split[i].length());
	    								s = s.replace("\n", "");
	    								s = s.replace(" ", "");
	    								String t = ottf.getText();
	    								t = t.replace(" ", "");
	    								System.out.println("TITLE = " + s);
	    								if(s.equalsIgnoreCase(t))
	    								{
	    									System.out.println("changing title");
	    									split[i] = "Title: " + nttf.getText();										
	    								}

	    							}
	    							if(split[i].indexOf("Author:") != -1)
	    							{
	    								String s = split[i].substring(8, split[i].length());
	    								s = s.replace("\n", "");
	    								s = s.replace(" ", "");
	    								String a = oatf.getText();
	    								a = a.replace(" ", "");
	    								System.out.println("author = " + s);
	    								if(s.equalsIgnoreCase(a))
	    								{
	    									split[i] = "Author: " + natf.getText();
	    									break;
	    									
	    								}

	    							}
	    						}
	    						FileWriter fw = new FileWriter(child);
	    						for(String l : split)
	    						{
	    							fw.write(l + "\n\n");
	    						}
	    						fw.close();
	    						editFrame.setVisible(false);
	    						editFrame.dispose();
	    						new AdminGUI(destination);
	    						//adminFrame.setVisible(true);
	    			    		JOptionPane.showMessageDialog(adminFrame, "Choose directory before beginning.\n  The directory chosen will be the place where the text files are held.\n  Afterwards, you may upload a selected file to that folder, as well as edit the files in the folder.", "Help", JOptionPane.PLAIN_MESSAGE);

	    					} catch (IOException e1) {
	    						// TODO Auto-generated catch block
	    						e1.printStackTrace();
	    					}
	    				} catch (FileNotFoundException e2) {
	    					// TODO Auto-generated catch block
	    					e2.printStackTrace();
	    				}  

	    			}
	    		}


	    		//check title&author attributes and then have a Jdialog box

	    	}
	    		});
	    JButton cancel = new JButton("Cancel");
	    bg.add(cancel);
	    cancel.addActionListener(new ActionListener()
	    		{
	    			public void actionPerformed(ActionEvent e)
	    			{
	    				//editFrame.setVisible(false);
	    				editFrame.dispose();
	    				new AdminGUI(destination);
	    				//adminFrame.setVisible(true);
	    			}
	    		});
	    editFrame.add(bg, BorderLayout.SOUTH);

	    
	    editFrame.setVisible(true);
}


public void searchGUI()
{
	//adminFrame.setVisible(false);
	final JFrame searchFrame = new JFrame("Search Books");
		searchFrame.setLayout(new BorderLayout());
		  searchFrame.setSize(800, 800);
		  
		  searchFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		  
		  
	
		  File folder = new File(destination);
		    File[] listOfFiles = folder.listFiles();
		 
		    for (int i = 0; i < listOfFiles.length; i++) {
		      File file = listOfFiles[i];
		      if (file.isFile() ) {
		        try
		        {
		          db.addTxtFiles(file);
		        }
		        catch (FileNotFoundException e1)
		        {
		          // TODO Auto-generated catch block
		          e1.printStackTrace();
		        }
		        catch (IOException e1)
		        {
		          // TODO Auto-generated catch block
		          e1.printStackTrace();
		        }
		        //String content = FileUtils.readFileToString(file);
		        /* do somthing with content */
		      }
		    }
		 
		//panels for search section
	    JPanel searchLabelPanel = new JPanel(new FlowLayout());
	    JPanel searchInputPanel = new JPanel(new FlowLayout());
	    JLabel searchLabel = new JLabel("Enter Search Terms");
	    
	    //text areas for search field and results
	    final JTextField searchText = new JTextField(25);
	    final JTextArea resultText = new JTextArea();
	    resultText.setLineWrap(true);
	    resultText.setEditable(false);
	    
	    JPanel topPanel = new JPanel();
	    topPanel.setLayout(new BorderLayout());
	    //add details to panels
	    searchLabelPanel.add(searchLabel);
	    searchInputPanel.add(searchText);
	    topPanel.add(searchInputPanel, BorderLayout.CENTER);
	    
	    JMenuBar bar = new JMenuBar();
	    JMenu file = new JMenu("File");
	    
	    JMenuItem back = new JMenuItem("Go Back");
	    back.addActionListener(new ActionListener()
		{
			public void actionPerformed(ActionEvent e)
			{
				//searchFrame.setVisible(false);
				//adminFrame.setVisible(true);
				searchFrame.dispose();
				new AdminGUI(destination);
			}
		});
	    file.add(back);
	    bar.add(file);
	    JMenu history = new JMenu("History");
	    //history
	    JMenuItem terms = new JMenuItem("All Terms Searched");
	    terms.addActionListener(new ActionListener(){
	    	public void actionPerformed(ActionEvent e)
	    	{
		      	JOptionPane.showMessageDialog(searchFrame, db.history.keySet().toString(), "Search Histroy", JOptionPane.PLAIN_MESSAGE);

	    	}
	    });
	    history.add(terms);
	    JMenuItem outputhist = new JMenuItem("Output Search Results");
	    outputhist.addActionListener(new ActionListener(){
	    	public void actionPerformed(ActionEvent e)
	    	{
		      	//TO-DO
	    	    JFileChooser jfc = new JFileChooser();
	    	    int retval = jfc.showOpenDialog(searchFrame);

	    	    if (retval == JFileChooser.APPROVE_OPTION)
	    	    {
	    	    	//uploadFile(jfc.getSelectedFile());
	    	      	try {
						PrintWriter out = new PrintWriter(jfc.getSelectedFile().toString());
						out.println(db.getHistory());
		    	      	JOptionPane.showMessageDialog(searchFrame, "History outputted successfully.", "Confirmation", JOptionPane.PLAIN_MESSAGE);

					} catch (FileNotFoundException e1) {
						// TODO Auto-generated catch block
						e1.printStackTrace();
					}
	    	    }
	    	}
	    });
	    history.add(outputhist);
	    JMenuItem load = new JMenuItem("Load Search History");
	    load.addActionListener(new ActionListener(){
	    	public void actionPerformed(ActionEvent e)
	    	{
		      	//TO-DO
	    	    JFileChooser jfc = new JFileChooser();
	    	    int retval = jfc.showOpenDialog(searchFrame);

	    	    if (retval == JFileChooser.APPROVE_OPTION)
	    	    {
	    	    	String str = "";
	    	    	//uploadFile(jfc.getSelectedFile());
	    	    	Scanner fileScanner;
					try {
						fileScanner = new Scanner(jfc.getSelectedFile());
		    	    	while (fileScanner.hasNextLine()){
			    	    	   str += fileScanner.nextLine() + "\n";
			    	    	}	    	   
			    	      	//JOptionPane.showMessageDialog(searchFrame, str, "Search Results History", JOptionPane.PLAIN_MESSAGE);
		    	    		resultText.setText(str);
					} catch (FileNotFoundException e1) {
						// TODO Auto-generated catch block
						e1.printStackTrace();
					}
	
	    	    }
	    	}
	    });
	    history.add(load);
	    bar.add(history);
	    topPanel.add(bar, BorderLayout.NORTH);
	    

	    //panels for result section
	    JPanel resultLabelPanel = new JPanel(new FlowLayout());
	    final JLabel resultLabel = new JLabel("Results");
	    JPanel resultPanel = new JPanel(new BorderLayout());
	    JScrollPane scrollPane = new JScrollPane(resultText);

	    
	    //panels for search results
	    resultLabelPanel.add(resultLabel);
	    resultPanel.add(resultLabelPanel, BorderLayout.NORTH);
	    resultPanel.add(scrollPane, BorderLayout.CENTER);
	    
	    JPanel resultPanel2 = new JPanel(new FlowLayout());
	    resultPanel2.add(resultLabelPanel, BorderLayout.NORTH);
	    resultPanel2.add(scrollPane, BorderLayout.CENTER);
	    
	    JPanel resultPanel3 = new JPanel(new FlowLayout());
	    resultPanel3.add(resultLabelPanel, BorderLayout.NORTH);
	    resultPanel3.add(scrollPane, BorderLayout.CENTER);
	    
	    JPanel resultPanel4 = new JPanel(new FlowLayout());
	    resultPanel4.add(resultLabelPanel, BorderLayout.NORTH);
	    resultPanel4.add(scrollPane, BorderLayout.CENTER);
	    
	    resultPanel.add(resultLabelPanel, BorderLayout.NORTH);
	    resultPanel.add(scrollPane, BorderLayout.CENTER);
	    
	    //add tabs
	    if(checktabs)
	    {
		    tabPane.addTab("Result 1", resultPanel);	
		    tabPane.addTab("Result 2", resultPanel2);
		    tabPane.addTab("Result 3", resultPanel3);
		    tabPane.addTab("Result 4", resultPanel4);
		    checktabs = false;
	    }
	    
		searchFrame.setVisible(true);

	    
	    //action listener for search button
	    searchText.addActionListener(new ActionListener(){
	      public void actionPerformed(ActionEvent e){
	    	  long startTime = System.currentTimeMillis();
	    	  long elapsedTime = 0L;
	    	  String result = db.search(searchText.getText());
	    	elapsedTime = (new Date()).getTime() - startTime;
	    	double seconds = elapsedTime/ 1000.0;
	    	resultLabel.setText("Results:(Searched " + Database.textcount + " Texts in "+ seconds + " Seconds)");
	    	  if(result.equals("QUERY TERM NOT FOUND"))
	    	  {
	    		  resultText.setText("");
	    		  JOptionPane.showMessageDialog(searchFrame, result, "Error", JOptionPane.ERROR_MESSAGE);
	    	  }
	    	  else
	    	  {
	    		  resultText.setText(db.search(searchText.getText()));
	    	      int index = resultText.getText().indexOf(searchText.getText());
	    	      int len = searchText.getText().length();
	    	      Highlighter highlighter = resultText.getHighlighter();
	    	      HighlightPainter painter = new DefaultHighlighter.DefaultHighlightPainter(Color.YELLOW);
	    	      while ( index >= 0 ) {
	    	         try
	    	         {
	    	             highlighter.addHighlight(index, index+len, painter);
	    	         }
	    	         catch ( BadLocationException e1 )
	    	         {
	    	             // TODO Auto-generated catch block
	    	             e1.printStackTrace();
	    	         }
	    	         index = resultText.getText().indexOf(searchText.getText(), index+len);
	    	        }

	    	  }
	      }});

	    //button for clearing the search
	    JButton clearSearch = new JButton("Clear Search");
	    clearSearch.addActionListener(new ActionListener(){
	      public void actionPerformed(ActionEvent e){
	        searchText.setText("");
	        resultText.setText("");
	      }});
	    
	    //panel for the search button
	    JPanel clearPanel = new JPanel(new FlowLayout());
	    clearPanel.add(clearSearch);
	    resultPanel.add(clearPanel, BorderLayout.SOUTH);
	    
	    //add components to main panel
	    JPanel textBoxPanel = new JPanel(new BorderLayout());
	    textBoxPanel.add(topPanel, BorderLayout.NORTH);
	    textBoxPanel.add(tabPane, BorderLayout.CENTER);
	    searchFrame.add(textBoxPanel, BorderLayout.CENTER);
	    searchFrame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
		
											  
	
}
}
